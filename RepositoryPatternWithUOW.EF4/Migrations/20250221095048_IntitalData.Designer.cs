// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RepositoryPatternWithEFCore.EF4;

#nullable disable

namespace RepositoryPatternWithEFCore.EF4.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250221095048_IntitalData")]
    partial class IntitalData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RepositoryPatternWithEFCore.EF4.AuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The action performed, such as (Add stock, Deduct stock, Transfer stock)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("ReferenceId")
                        .HasColumnType("int")
                        .HasComment("The entity ID related to the audit log, can be a product, stock, or transaction ID");

                    b.Property<int?>("StockTransactionId")
                        .HasColumnType("int")
                        .HasComment("The stock transaction ID associated with this audit log");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("The date and time the action was performed");

                    b.Property<int?>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ReferenceId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("AuditLogs", (string)null);
                });

            modelBuilder.Entity("RepositoryPatternWithEFCore.EF4.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);
                });

            modelBuilder.Entity("RepositoryPatternWithEFCore.EF4.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("DiscountRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("InternationalCode")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(55)
                        .HasColumnType("nvarchar(55)");

                    b.Property<decimal>("PurchasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SellingPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ShortCode")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("InternationalCode")
                        .IsUnique()
                        .HasFilter("[InternationalCode] IS NOT NULL");

                    b.HasIndex("ShortCode")
                        .IsUnique()
                        .HasFilter("[ShortCode] IS NOT NULL");

                    b.ToTable("Products", (string)null);
                });

            modelBuilder.Entity("RepositoryPatternWithEFCore.EF4.Stock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Stocks", null, t =>
                        {
                            t.HasCheckConstraint("CK_ProductStock_Quantity", "[Quantity] >= 0");
                        });
                });

            modelBuilder.Entity("RepositoryPatternWithEFCore.EF4.StockTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("ChangeValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DestinationWarehouseId")
                        .HasColumnType("int");

                    b.Property<decimal>("NewValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OldValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("ReferenceId")
                        .HasColumnType("int");

                    b.Property<int>("StockId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DestinationWarehouseId");

                    b.HasIndex("ProductId");

                    b.HasIndex("StockId");

                    b.ToTable("StockTransactions", null, t =>
                        {
                            t.HasCheckConstraint("CK_StockTransaction_Values", "[NewValue] = [OldValue] + [ChangeValue]");
                        });
                });

            modelBuilder.Entity("RepositoryPatternWithEFCore.EF4.Warehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Warehouses", (string)null);
                });

            modelBuilder.Entity("RepositoryPatternWithEFCore.EF4.AuditLog", b =>
                {
                    b.HasOne("RepositoryPatternWithEFCore.EF4.Product", null)
                        .WithMany("AuditLogs")
                        .HasForeignKey("ProductId");

                    b.HasOne("RepositoryPatternWithEFCore.EF4.StockTransaction", "StockTransaction")
                        .WithMany("AuditLogs")
                        .HasForeignKey("ReferenceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RepositoryPatternWithEFCore.EF4.Warehouse", null)
                        .WithMany("AuditLogs")
                        .HasForeignKey("WarehouseId");

                    b.Navigation("StockTransaction");
                });

            modelBuilder.Entity("RepositoryPatternWithEFCore.EF4.Product", b =>
                {
                    b.HasOne("RepositoryPatternWithEFCore.EF4.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("RepositoryPatternWithEFCore.EF4.Stock", b =>
                {
                    b.HasOne("RepositoryPatternWithEFCore.EF4.Product", "Product")
                        .WithMany("ProductStocks")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RepositoryPatternWithEFCore.EF4.Warehouse", "Warehouse")
                        .WithMany("ProductStocks")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("RepositoryPatternWithEFCore.EF4.StockTransaction", b =>
                {
                    b.HasOne("RepositoryPatternWithEFCore.EF4.Warehouse", "DestinationWarehouse")
                        .WithMany("StockTransactions")
                        .HasForeignKey("DestinationWarehouseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RepositoryPatternWithEFCore.EF4.Product", null)
                        .WithMany("StockTransactions")
                        .HasForeignKey("ProductId");

                    b.HasOne("RepositoryPatternWithEFCore.EF4.Stock", "ProductStock")
                        .WithMany("StockTransactions")
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DestinationWarehouse");

                    b.Navigation("ProductStock");
                });

            modelBuilder.Entity("RepositoryPatternWithEFCore.EF4.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("RepositoryPatternWithEFCore.EF4.Product", b =>
                {
                    b.Navigation("AuditLogs");

                    b.Navigation("ProductStocks");

                    b.Navigation("StockTransactions");
                });

            modelBuilder.Entity("RepositoryPatternWithEFCore.EF4.Stock", b =>
                {
                    b.Navigation("StockTransactions");
                });

            modelBuilder.Entity("RepositoryPatternWithEFCore.EF4.StockTransaction", b =>
                {
                    b.Navigation("AuditLogs");
                });

            modelBuilder.Entity("RepositoryPatternWithEFCore.EF4.Warehouse", b =>
                {
                    b.Navigation("AuditLogs");

                    b.Navigation("ProductStocks");

                    b.Navigation("StockTransactions");
                });
#pragma warning restore 612, 618
        }
    }
}
